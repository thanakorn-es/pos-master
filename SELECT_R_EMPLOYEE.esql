CREATE COMPUTE MODULE SELECT_R_EMPLOYEE
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE inms CHARACTER;
		DECLARE out_msg CHARACTER;
		DECLARE SQLErrorText1 CHARACTER;   
		DECLARE SQLCode1 INTEGER;  
		DECLARE data_length INTEGER; 
		DECLARE location_data CHARACTER;  
		DECLARE mySharedRow ROW;
		SET SQLErrorText1 = '';

		--* SET mySharedRow.location[] = select R.* from Database.TMP_LOCATION AS R;
		
		--* SET OutputRoot.JSON.Data.ResultSet[] = select  R.name_role,L.location_id from Database.TMP_ROLE AS R,Database.M_LOCATION AS L where (R.establishment = L.resource_uri_est and L.location_id is not null) and (R.name_role  not in (select M.name from Database.M_ROLE AS M) and L.location_id  not in (select M.location_id from Database.M_ROLE AS M));
		DELETE FROM Database.R_EMPLOYEE AS D;
					
		COMMIT;	
		SET OutputRoot.JSON.Data.ResultSet[] = PASSTHRU ('select  R.email,R.employee_start,R.first_name,R.last_name,R.external_id,R.internal_id,R.phone_number,R.employee,SUBSTR(xmlserialize(xmlagg(xmltext(CONCAT( '', '',L.id))) as VARCHAR(1024)), 3) AS "id" from TMP_ROLE AS R,M_ROLE AS L where (R.resource_uri_role = L.resource_uri_role and R.establishment = L.resource_uri_est and L.id is not null) and (R.employee  not in (select MR.resource_uri from R_EMPLOYEE AS MR))  and R.active_emp = ''1'' group by R.email,R.employee_start,R.first_name,R.last_name,R.phone_number,R.employee,R.external_id,R.internal_id');
		
		--* insert into Database.M_LOCATION (id_adr)	VALUES (OutputRoot.JSON.Data.ResultSet[5].ID_ADR);
		
		DECLARE i INTEGER 1;
		
		FOR source AS OutputRoot.JSON.Data.ResultSet[] DO
		insert
		into Database.R_EMPLOYEE
		(
			id_department,
		email,
		employee_start,
		first_name,
		last_name,
		phone_number,
		external_id,
		internal_id,
		resource_uri
		)
		VALUES
		(
			source.id,
			source.EMAIL,
			source.EMPLOYEE_START,
			source.FIRST_NAME,
			source.LAST_NAME,
			source.PHONE_NUMBER,
			source.EXTERNAL_ID,
			source.INTERNAL_ID,
			source.EMPLOYEE);

							
		SET SQLCode1 = SQLCODE;
		SET SQLErrorText1 = SQLERRORTEXT;
					
		COMMIT;		

		
		SET i = i + 1;
		END FOR;
		
		SET OutputRoot.JSON.Data.ReconTemp[] = select A.* from Database.M_EMPLOYEE AS A where A.RESOURCE_URI not in (select B.RESOURCE_URI from Database.R_EMPLOYEE AS B);
			
 		FOR source AS OutputRoot.JSON.Data.ReconTemp[] DO 		
 		
		UPDATE Database.M_EMPLOYEE AS A
		
 		SET flag = '3'
 		 			
 		where A.resource_uri = source.RESOURCE_URI;
 		
 		SET SQLCode1 = SQLCODE;
		SET SQLErrorText1 = SQLERRORTEXT;

 		COMMIT;
		END FOR;
		
		PROPAGATE TO TERMINAL 'out1';
		
		SET OutputRoot.JSON.Data.Del[] = select A.id from Database.M_EMPLOYEE AS A where A.flag = '3';
		
		RETURN TRUE;
		
	END;

END MODULE;