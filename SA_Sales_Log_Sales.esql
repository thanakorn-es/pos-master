

CREATE COMPUTE MODULE SA_Sales_Log_Sales
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE Tpattern CHARACTER 'yyyy-MM-dd HH:mm:ss';
		DECLARE EPOCH_TIME TIMESTAMP;
		SET EPOCH_TIME = CAST('1970-01-01T00:00:00.000+00.00' AS TIMESTAMP FORMAT 'IU');
		
		DECLARE i,count INTEGER;
		DECLARE a,source1, source2  CHARACTER;
     	DECLARE t, st1, st2, ct TIME; 
     	DECLARE ctsmp TIMESTAMP;
     	
     	SET count = CARDINALITY(InputRoot.JSON.Data.quarters.Item[]);
     	SET i = 1;
     	SET t = CAST('4:14 PM' AS TIME FORMAT 'K:mm a');
     	-- SET a = CAST(count AS CHARACTER) || ' -- ' || CAST(CURRENT_TIME AS CHARACTER FORMAT 'K:mm a')  || ' | ' || CAST(t AS CHARACTER FORMAT 'K:mm a') ||' --> ';
  		SET ctsmp = CURRENT_TIMESTAMP; 
  		SET ct = CURRENT_TIME; 
  	
  	
  		WHILE i <= count DO 		
     		SET source1 = TRIM(SUBSTRING(InputRoot.JSON.Data.quarters.Item[i].Item[1] BEFORE '-'));
			SET source2 = TRIM(SUBSTRING(InputRoot.JSON.Data.quarters.Item[i].Item[1] AFTER '-'));
     		SET st1 = CAST(source1 AS TIME FORMAT 'hh:mm a');
     		SET st2 = CAST(source2 AS TIME FORMAT 'hh:mm a');
     		
     		-- SET a = a || InputRoot.JSON.Data.quarters.Item[i].Item[1] || '...' ||  CAST(InputRoot.JSON.Data.quarters.Item[i].Item[2].sales AS CHARACTER)  || ' xxx ';
     		
     		IF ct > st1 AND ct < st2 THEN
     			-- SET a = a || InputRoot.JSON.Data.quarters.Item[i].Item[1] || '...' ||  CAST(InputRoot.JSON.Data.quarters.Item[i].Item[2].sales AS CHARACTER)  || ' xxx ';	
     			SET a = CAST(CAST(InputRoot.JSON.Data.quarters.Item[i].Item[2].sales AS DECIMAL(12,2)) AS CHARACTER);
     			SET OutputRoot.JSON.Data.period = CAST( (ctsmp - EPOCH_TIME)SECOND AS INTEGER);
     			SET OutputRoot.JSON.Data.sales = CAST(InputRoot.JSON.Data.quarters.Item[i].Item[2].sales AS DECIMAL(12,2));
     			
     			PROPAGATE TO TERMINAL 'out1' ENVIRONMENT InputLocalEnvironment MESSAGE OutputRoot;
     		END IF;
  
     		-- IF InputRoot.JSON.Data.ResultSet[i].me 
			-- INSERT INTO Database.MINORDB.db2inst1.M_STORESTAT(loc_id, ds_id, ds_type, dj_id) VALUES( InputRoot.JSON.Data.ResultSet[i].LOCATION_ID, -1,'actual', -1);
			-- COMMIT;
			
			SET i = i + 1;
     	END WHILE;
		
		
		SET OutputRoot.JSON.Data.p = a;
		PROPAGATE TO TERMINAL 'out' ENVIRONMENT InputLocalEnvironment MESSAGE OutputRoot ;
		
		RETURN FALSE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
