

CREATE COMPUTE MODULE SA_Datastream_SyncTDataStream
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE i INTEGER 1;
		DECLARE count INTEGER;
		DECLARE my_credentials ROW;
		SET my_credentials.Item[] = (SELECT CC.SYSTEM_KEY AS SYSTEM_KEY FROM Database.MINORDB.db2inst1.C_CREDENTIALS AS CC, Database.MINORDB.db2inst1.C_ENVIRONMENT AS CE WHERE CC.SYSTEM_CODE = CE.REFCODE AND CE.SYSTEM_NAME = 'Tanda' AND CE.FLAG = 1 );	
				
		SET count = CARDINALITY(InputRoot.JSON.Data.ResultSet[]);
     	
     	WHILE i <= count DO 
			INSERT INTO Database.MINORDB.db2inst1.M_STORESTAT(loc_id, ds_id, ds_type, dj_id) VALUES( InputRoot.JSON.Data.ResultSet[i].LOCATION_ID, -2,'transaction', -2);
			COMMIT;
		
			SET OutputLocalEnvironment.Destination.REST.Request.Parameters."Authorization" = my_credentials.Item[1].SYSTEM_KEY;			
		
			-- ms = my sales
			-- ss = staging sales
			-- ts# = test sales 
		
			SET OutputRoot.JSON.Data.name = 'tt30_' || InputRoot.JSON.Data.ResultSet[i].LOCATION_ID || '_ds';
			SET OutputRoot.JSON.Data.data_interval = 900;
		
		
		
			PROPAGATE TO TERMINAL 'out' ENVIRONMENT OutputLocalEnvironment MESSAGE OutputRoot;
		
			SET i = i + 1;
		END WHILE;
     	
     	PROPAGATE;
     	
		RETURN FALSE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
